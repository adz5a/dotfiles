!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/fefbad2/
$VISUAL	init.vim	/^let $VISUAL="nvr -cc split --remote-wait"$/;"	v
-1 +0,0	src/diff-so-fancy/test/fixtures/single-line-remove.diff	/^@@ -1 +0,0 @@$/;"	h	deletedFile:test/data/readywaitasset.js
-1 +1	src/diff-so-fancy/test/fixtures/hunk_no_comma.diff	/^@@ -1 +1 @@$/;"	h	modifiedFile:i/file
-1,16 +1,15	src/diff-so-fancy/test/fixtures/hg.diff	/^@@ -1,16 +1,15 @@$/;"	h	modifiedFile:a/hello.c
-1,4 +1,4	src/diff-so-fancy/test/fixtures/file-rename.diff	/^@@ -1,4 +1,4 @@$/;"	h	modifiedFile:a/dist.ini
-1,6 +1,6	src/diff-so-fancy/test/fixtures/first-three-line.diff	/^@@ -1,6 +1,6 @@$/;"	h	modifiedFile:package.json
-113,7 +113,7	src/diff-so-fancy/test/fixtures/leading-dashes.diff	/^@@ -113,7 +113,7 @@ keyboardlayout.xkeyboard_country_code = {$/;"	h	modifiedFile:i/lib/awful/widget/keyboardlayout.lua
-2,4 +2,4	src/diff-so-fancy/test/fixtures/move_with_content_change.diff	/^@@ -2,4 +2,4 @@ height: '10px',$/;"	h	modifiedFile:a/a.txt
-8352,7 +8352,7	src/diff-so-fancy/test/fixtures/weird.diff	/^@@ -8352,7 +8352,7 @@$/;"	h	modifiedFile:a/doc/manual.xml.head
-9,6 +9,7	src/diff-so-fancy/test/fixtures/file-rename.diff	/^@@ -9,6 +9,7 @@ version = 0.05$/;"	h	modifiedFile:a/dist.ini
.vim.res	src/minpac/test/Make_win.mak	/^.vim.res:$/;"	t
.vim.res	src/minpac/test/Makefile	/^.vim.res:$/;"	t
0	src/diff-so-fancy/package.json	/^    "git",$/;"	s	array:keywords
1	src/diff-so-fancy/package.json	/^    "diff",$/;"	s	array:keywords
2	src/diff-so-fancy/package.json	/^    "fancy",$/;"	s	array:keywords
3	src/diff-so-fancy/package.json	/^    "good-lookin'",$/;"	s	array:keywords
4	src/diff-so-fancy/package.json	/^    "diff-highlight",$/;"	s	array:keywords
5	src/diff-so-fancy/package.json	/^    "color",$/;"	s	array:keywords
6	src/diff-so-fancy/package.json	/^    "readable",$/;"	s	array:keywords
7	src/diff-so-fancy/package.json	/^    "highlight"$/;"	s	array:keywords
<C-j>	src/minpac/autoload/minpac/status.vim	/^  nnoremap <silent><buffer> <C-j> :call <SID>nextPackage()<CR>$/;"	m
<C-k>	src/minpac/autoload/minpac/status.vim	/^  nnoremap <silent><buffer> <C-k> :call <SID>prevPackage()<CR>$/;"	m
<C-w>t	_vimrc	/^nnoremap <C-w>t :term<CR>$/;"	m
<CR>	src/minpac/autoload/minpac/status.vim	/^  nnoremap <silent><buffer> <CR> :call <SID>openSha()<CR>$/;"	m
<Down>	_vimrc	/^imap <Down> <NOP>$/;"	m
<Down>	_vimrc	/^map <Down> :resize -5<CR>$/;"	m
<Leader>/	_vimrc	/^noremap <silent> <Leader>\/ q\/$/;"	m
<Leader>=	_vimrc	/^nnoremap <Leader>= =i}$/;"	m
<Leader>==	_vimrc	/^nnoremap <Leader>== gg=G$/;"	m
<Leader>?	_vimrc	/^noremap <silent> <Leader>? q?$/;"	m
<Leader>A	ftplugin/clojure.vim	/^nnoremap <buffer> <Leader>A :argdel %<CR>$/;"	m
<Leader>B	_vimrc	/^nnoremap <Leader>B :Gblame -M -w<CR>$/;"	m
<Leader>B	_vimrc	/^noremap <Leader>B [{%$/;"	m
<Leader>B	_vimrc	/^vnoremap <Leader>B :'<,'>Gblame -M -w<CR>$/;"	m
<Leader>C	_vimrc	/^noremap <Leader>C :set nolist<CR>$/;"	m
<Leader>D	_vimrc	/^noremap <Leader>D :Gvdiff HEAD<CR>$/;"	m
<Leader>F	_vimrc	/^nnoremap <Leader>F :FZF<CR>$/;"	m
<Leader>H	_vimrc	/^noremap <silent> <Leader>H :tabprevious<CR>$/;"	m
<Leader>J	_vimrc	/^noremap <silent> <Leader>J :cnext<CR>$/;"	m
<Leader>K	_vimrc	/^noremap <silent> <Leader>K :cprev<CR>$/;"	m
<Leader>L	_vimrc	/^noremap <silent> <Leader>L :tabnext<CR>$/;"	m
<Leader>NN	ftplugin/clojure.vim	/^nnoremap <buffer> <Leader>NN :N<CR>$/;"	m
<Leader>O	_vimrc	/^nnoremap <Leader>O i<CR><ESC>O<ESC>o<ESC>O$/;"	m
<Leader>P	_vimrc	/^noremap <silent> <Leader>P )]<ESC>$/;"	m
<Leader>R	_vimrc	/^noremap <silent> <Leader>R :redraw!<CR>$/;"	m
<Leader>W	_vimrc	/^noremap <Leader>W :Gwrite<CR>$/;"	m
<Leader>a	ftplugin/clojure.vim	/^nnoremap <buffer> <Leader>a :argadd<CR>$/;"	m
<Leader>afn	ftplugin/javascript.vim	/^nnoremap <Leader>afn iasync function () {}<Esc>19h$/;"	m
<Leader>ar	ftplugin/javascript.vim	/^nnoremap <Leader>ar i() => {}<Esc>7h$/;"	m
<Leader>b	_vimrc	/^nnoremap <Leader>b :Gblame<CR>$/;"	m
<Leader>b	_vimrc	/^noremap <Leader>b [{$/;"	m
<Leader>b	_vimrc	/^vnoremap <Leader>b :'<,'>Gblame<CR>$/;"	m
<Leader>c	_vimrc	/^noremap <Leader>c :set list<CR>$/;"	m
<Leader>cc	_vimrc	/^nnoremap <Leader>cc :call ToggleColorcolumn()<CR>$/;"	m
<Leader>cp	_vimrc	/^nnoremap <Leader>cp :call CopyFilepath()<CR>$/;"	m
<Leader>d	_vimrc	/^noremap <Leader>d :Gvdiff<CR>$/;"	m
<Leader>db	_vimrc	/^nnoremap <Leader>db gv:DB<CR>$/;"	m
<Leader>db	_vimrc	/^vnoremap <Leader>db :DB<CR>$/;"	m
<Leader>e	_vimrc	/^noremap <silent> <Leader>e :e!<CR>$/;"	m
<Leader>ee	ftplugin/clojure.vim	/^nnoremap <buffer> <Leader>ee :%Eval<CR>$/;"	m
<Leader>ee	ftplugin/clojure.vim	/^vnoremap <buffer> <Leader>ee :'<,'>Eval<CR>$/;"	m
<Leader>f	_vimrc	/^nnoremap <Leader>f zfi}$/;"	m
<Leader>fn	ftplugin/javascript.vim	/^nnoremap <Leader>fn ifunction () {}<Esc>13h$/;"	m
<Leader>gf	_vimrc	/^map <Leader>gf :e <cfile><CR>$/;"	m
<Leader>m	_vimrc	/^noremap <silent> <Leader>m :%s\/\\s*$\/<CR>:%s\/\\%u00a0\/ \/g<CR>:noh<CR><C-o>$/;"	m
<Leader>n	_vimrc	/^noremap <silent> <Leader>n :tabnew<CR>:Ex<CR>$/;"	m
<Leader>nn	ftplugin/clojure.vim	/^nnoremap <buffer> <Leader>nn :n<CR>$/;"	m
<Leader>o	_vimrc	/^nnoremap <Leader>o i<CR><ESC>O$/;"	m
<Leader>p	_vimrc	/^noremap <silent> <Leader>p [(<ESC>%$/;"	m
<Leader>q	_vimrc	/^noremap <silent> <Leader>q q:$/;"	m
<Leader>r	_vimrc	/^nnoremap <Leader>r :call ToggleScrollOffset()<CR>$/;"	m
<Leader>s	_vimrc	/^noremap <Leader>s :Gstatus<CR>$/;"	m
<Leader>t	_vimrc	/^noremap <silent> <Leader>t :tab split<CR>$/;"	m
<Leader>tq	_vimrc	/^noremap <silent> <Leader>tq :tabclose<CR>$/;"	m
<Leader>w	_vimrc	/^nnoremap <Leader>w yiw$/;"	m
<Leader>w	_vimrc	/^noremap <Leader>w :w<CR>$/;"	m
<Leader>w=	_vimrc	/^nnoremap <Leader>w= :wincmd =<CR>$/;"	m
<Leader>wH	_vimrc	/^nnoremap <Leader>wH :wincmd H<CR>$/;"	m
<Leader>wJ	_vimrc	/^nnoremap <Leader>wJ :wincmd J<CR>$/;"	m
<Leader>wT	_vimrc	/^nnoremap <Leader>wT :wincmd T<CR>$/;"	m
<Leader>wh	_vimrc	/^nnoremap <Leader>wh :wincmd h<CR>$/;"	m
<Leader>wj	_vimrc	/^nnoremap <Leader>wj :wincmd j<CR>$/;"	m
<Leader>wk	_vimrc	/^nnoremap <Leader>wk :wincmd k<CR>$/;"	m
<Leader>wl	_vimrc	/^nnoremap <Leader>wl :wincmd l<CR>$/;"	m
<Leader>wn	_vimrc	/^nnoremap <Leader>wn :wincmd n<CR>$/;"	m
<Leader>wq	_vimrc	/^nnoremap <Leader>wq :wincmd q<CR>$/;"	m
<Leader>ws	_vimrc	/^nnoremap <Leader>ws :wincmd s<CR>$/;"	m
<Leader>wx	_vimrc	/^nnoremap <Leader>wx :wincmd x<CR>$/;"	m
<Leader>z	_vimrc	/^noremap <silent> <Leader>z 1z=$/;"	m
<Leader>ù	_vimrc	/^noremap <silent> <Leader>ù %$/;"	m
<Left>	_vimrc	/^imap <Left> <NOP>$/;"	m
<Left>	_vimrc	/^map <Left> :vertical resize -5<CR>$/;"	m
<Right>	_vimrc	/^imap <Right> <NOP>$/;"	m
<Right>	_vimrc	/^map <Right> :vertical resize +5<CR>$/;"	m
<Up>	_vimrc	/^imap <Up> <NOP>$/;"	m
<Up>	_vimrc	/^map <Up> :resize +5<CR>$/;"	m
Advanced sample	src/minpac/README.md	/^#### Advanced sample$/;"	t
AfterTheTest	src/minpac/test/runtest.vim	/^func AfterTheTest()$/;"	f
Basic sample	src/minpac/README.md	/^#### Basic sample$/;"	t
CACHED	src/minpac/tools/appveyor-dl.bat	/^	set CACHED=no$/;"	v
CACHED	src/minpac/tools/appveyor-dl.bat	/^set CACHED=yes$/;"	v
Callback	src/diff-so-fancy/test/fixtures/leading-dashes.diff	/^--- Callback for updaing current layout$/;"	m
Chercher qui occupe quel port	protips.md	/^## Chercher qui occupe quel port$/;"	s
CleanBuffers	_vimrc	/^command! -bang CleanBuffers call DeleteHiddenBuffers()<CR>$/;"	c
Clojure	.ctags	/^--langdef=Clojure$/;"	l
Commands	spellcheck.md	/^## Commands$/;"	s
Commands	src/minpac/README.md	/^### Commands$/;"	S
Concept	src/minpac/README.md	/^Concept$/;"	s
Context	_vimrc	/^command! -count=5 -nargs=+ Context call ListContext(<count>, <f-args>)$/;"	c
Contributing	src/diff-so-fancy/README.md	/^## Contributing$/;"	s
CopyFilepath	_vimrc	/^function! CopyFilepath ()$/;"	f
Credit	src/minpac/README.md	/^Credit$/;"	s
Customizing 'packpath'	src/minpac/README.md	/^#### Customizing 'packpath'$/;"	t
DL	src/minpac/tools/appveyor-dl.bat	/^	if not ERRORLEVEL 1 set DL=no$/;"	v
DL	src/minpac/tools/appveyor-dl.bat	/^	set DL=no$/;"	v
DL	src/minpac/tools/appveyor-dl.bat	/^set DL=yes$/;"	v
DeleteHiddenBuffers	_vimrc	/^function DeleteHiddenBuffers()$/;"	f
DiffHighlight	src/diff-so-fancy/lib/DiffHighlight.pm	/^package DiffHighlight;$/;"	p
DiffHighlight	src/diff-so-fancy/third_party/build_fatpack/diff-so-fancy	/^  package DiffHighlight;$/;"	p
EarlyExit	src/minpac/test/runtest.vim	/^func EarlyExit(test)$/;"	f
FastGrep	_vimrc	/^fun! FastGrep (count, pattern,...)$/;"	f
Find	_vimrc	/^command! -nargs=1 Find call FindFiles(<q-args>)$/;"	c
FindAll	_vimrc	/^command! -nargs=1 FindAll call FindFiles(<q-args>)$/;"	c
FindFiles	_vimrc	/^fun! FindFiles(filename)$/;"	f
Finish-update hooks	src/minpac/README.md	/^#### Finish-update hooks$/;"	t
FinishTesting	src/minpac/test/runtest.vim	/^func FinishTesting()$/;"	f
Functions	src/minpac/README.md	/^### Functions$/;"	S
Gbranch	_vimrc	/^command! -nargs=* Gbranch call GitBranch(<f-args>)$/;"	c
GetAllocId	src/minpac/test/runtest.vim	/^function GetAllocId(name)$/;"	f
Git template	README.md	/^## Git template$/;"	s
GitBranch	_vimrc	/^function! GitBranch (...)$/;"	f
GitShow	_vimrc	/^fun! GitShow(hash)$/;"	f
GitSince	_vimrc	/^function! GitSince (ref)$/;"	f
Grep	_vimrc	/^command! -range -nargs=* Grep call FastGrep(<count>, <f-args>)$/;"	c
Gshow	_vimrc	/^command! -nargs=1 Gshow call GitShow(<q-args>)$/;"	c
Gsince	_vimrc	/^command! -nargs=1 Gsince call GitSince(<q-args>)$/;"	c
Hacking	src/diff-so-fancy/hacking-and-testing.md	/^### Hacking$/;"	S
History	src/diff-so-fancy/history.md	/^## History$/;"	s
Hooks	src/minpac/README.md	/^### Hooks$/;"	S
Improved colors for the highlighted bits	src/diff-so-fancy/README.md	/^### Improved colors for the highlighted bits$/;"	S
Install	src/diff-so-fancy/README.md	/^## Install$/;"	s
Installation	README.md	/^## Installation$/;"	s
Installation	src/minpac/README.md	/^Installation$/;"	s
K	ftplugin/sql.vim	/^nnoremap <buffer> K :exe ':DB \\d ' . expand('<cword>')<CR>$/;"	m
License	src/diff-so-fancy/README.md	/^## License$/;"	s
License	src/minpac/README.md	/^License$/;"	s
Linux, macOS	src/minpac/README.md	/^### Linux, macOS$/;"	S
ListContext	_vimrc	/^function! ListContext (fieldview, ...)$/;"	f
Load minpac on demand	src/minpac/README.md	/^#### Load minpac on demand$/;"	t
Mappings	spellcheck.md	/^## Mappings$/;"	s
Mappings	src/minpac/README.md	/^### Mappings$/;"	S
Moving around in the diff	src/diff-so-fancy/pro-tips.md	/^#### Moving around in the diff$/;"	t
NEW_TESTS	src/minpac/test/Make_all.mak	/^NEW_TESTS = \\$/;"	m
NO_INITS	src/minpac/test/Make_all.mak	/^NO_INITS = -U NONE $(NO_PLUGINS)$/;"	m
NO_PLUGINS	src/minpac/test/Make_all.mak	/^NO_PLUGINS = --noplugin # --not-a-term$/;"	m
One-off fanciness or a specific diff-so-fancy alias	src/diff-so-fancy/pro-tips.md	/^#### One-off fanciness or a specific diff-so-fancy alias$/;"	t
Opting-out	src/diff-so-fancy/pro-tips.md	/^#### Opting-out$/;"	t
Optional: install additional libraries. Some may be needed for some scripts to work.	README.md	/^## Optional: install additional libraries. Some may be needed for some scripts to work.$/;"	s
Options	src/diff-so-fancy/README.md	/^## Options$/;"	s
Other documentation	src/diff-so-fancy/README.md	/^### Other documentation$/;"	S
Overview	src/minpac/README.md	/^Overview$/;"	s
Post-update hooks	src/minpac/README.md	/^#### Post-update hooks$/;"	t
Postgres URL connection	README.md	/^### Postgres URL connection$/;"	S
Pro tips	README.md	/^## Pro tips$/;"	s
Pro-tips	src/diff-so-fancy/pro-tips.md	/^## Pro-tips$/;"	s
Protips	protips.md	/^# Protips$/;"	c
Q	ftplugin/qf.vim	/^nnoremap <buffer> Q :cexpr []<CR>:q<CR>$/;"	m
README	README.md	/^# README$/;"	c
RUN_VIMTEST	src/minpac/test/Makefile	/^RUN_VIMTEST = $(VIMPROG) -u NONE$/;"	m
Raw patches	src/diff-so-fancy/pro-tips.md	/^#### Raw patches$/;"	t
RefreshStatusLine	_vimrc	/^command! RefreshStatusLine call RefreshStatusLineColor()$/;"	c
RefreshStatusLineColor	_vimrc	/^fun! RefreshStatusLineColor ()$/;"	f
Reporting bugs	src/diff-so-fancy/reporting-bugs.md	/^### Reporting bugs$/;"	S
Requirements	src/minpac/README.md	/^Requirements$/;"	s
RunTheTest	src/minpac/test/runtest.vim	/^func RunTheTest(test)$/;"	f
Running tests	src/diff-so-fancy/hacking-and-testing.md	/^### Running tests$/;"	S
S	_vimrc	/^command! -nargs=0 S call system("xclip -sel clip -i", getreg("+"))$/;"	c
SESSION	Makefile	/^SESSION=dotfiles$/;"	m
Sample .vimrc	src/minpac/README.md	/^### Sample .vimrc$/;"	S
Screenshot	src/diff-so-fancy/README.md	/^## Screenshot$/;"	s
SelectTags	_vimrc	/^function! SelectTags (split)$/;"	f
Similar projects	src/minpac/README.md	/^Similar projects$/;"	s
Spell checking	spellcheck.md	/^# Spell checking$/;"	c
Terminal	README.md	/^## Terminal$/;"	s
Test_minpac_add	src/minpac/test/test_minpac.vim	/^func Test_minpac_add()$/;"	f
Test_minpac_clean	src/minpac/test/test_minpac.vim	/^func Test_minpac_clean()$/;"	f
Test_minpac_getpackages	src/minpac/test/test_minpac.vim	/^func Test_minpac_getpackages()$/;"	f
Test_minpac_init	src/minpac/test/test_minpac.vim	/^func Test_minpac_init()$/;"	f
Test_minpac_update	src/minpac/test/test_minpac.vim	/^func Test_minpac_update()$/;"	f
ToggleColorcolumn	_vimrc	/^function! ToggleColorcolumn ()$/;"	f
ToggleScrollOffset	_vimrc	/^function! ToggleScrollOffset()$/;"	f
ToggleWrap	_vimrc	/^function! ToggleWrap(bang)$/;"	f
Usage	src/diff-so-fancy/README.md	/^## Usage$/;"	s
Usage	src/minpac/README.md	/^Usage$/;"	s
VIM CTAGS integration	README.md	/^### VIM CTAGS integration$/;"	S
VIMPROG	src/minpac/test/Make_win.mak	/^VIMPROG = vim$/;"	m
VIMPROG	src/minpac/test/Makefile	/^VIMPROG = vim$/;"	m
W	_vimrc	/^command! -nargs=0 W Grwite$/;"	c
Windows	src/minpac/README.md	/^### Windows$/;"	S
Wrap	_vimrc	/^command! -bang Wrap call ToggleWrap(<bang>0)<CR>$/;"	c
Y	_vimrc	/^noremap <silent> Y y\$$/;"	m
Zsh plugin providing diff-so-fancy	src/diff-so-fancy/pro-tips.md	/^#### Zsh plugin providing diff-so-fancy$/;"	t
a/a.txt	src/diff-so-fancy/test/fixtures/move_with_content_change.diff	/^--- a\/a.txt$/;"	m
a/dist.ini	src/diff-so-fancy/test/fixtures/file-rename.diff	/^--- a\/dist.ini$/;"	m
a/doc/manual.xml.head	src/diff-so-fancy/test/fixtures/weird.diff	/^--- a\/doc\/manual.xml.head$/;"	m
a/hello.c	src/diff-so-fancy/test/fixtures/hg.diff	/^--- a\/hello.c	Fri Aug 26 01:21:28 2005 -0700$/;"	m
after-symlink	Makefile	/^after-symlink:$/;"	t
all	src/minpac/test/Make_win.mak	/^all:	newtests report$/;"	t
all	src/minpac/test/Makefile	/^all:	newtestssilent report$/;"	t
arg_archs	src/minpac/tools/dl-kaoriya-vim.py	/^arg_archs = ['all', 'win32', 'win64']$/;"	v
arg_default_arch	src/minpac/tools/dl-kaoriya-vim.py	/^arg_default_arch = 'all'$/;"	v
arg_desc	src/minpac/tools/dl-kaoriya-vim.py	/^arg_desc = 'Download the latest KaoriYa Vim from the GitHub release'$/;"	v
args	src/minpac/tools/dl-kaoriya-vim.py	/^args = parser.parse_args()$/;"	v
argv	src/diff-so-fancy/diff-so-fancy	/^sub argv {$/;"	s
argv	src/diff-so-fancy/third_party/build_fatpack/build.pl	/^sub argv {$/;"	s
argv	src/diff-so-fancy/third_party/build_fatpack/diff-so-fancy	/^sub argv {$/;"	s
asset_time	src/minpac/tools/dl-kaoriya-vim.py	/^    asset_time = time.strptime(asset['updated_at'], '%Y-%m-%dT%H:%M:%SZ')$/;"	v
author	src/diff-so-fancy/package.json	/^  "author": "Paul Irish",$/;"	s
b:match_ignorecase	ftplugin/javascript.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_words	ftplugin/javascript.vim	/^  let b:match_words = '(:),\\[:\\],{:},<:>,' .$/;"	v
bg	.tmux.conf	/^set -g message-style 'bg=black,fg=cyan'$/;"	k
bg	.tmux.conf	/^set -g status-style 'bg=#1E272C,fg=#6A7D89'$/;"	k
bg	.tmux.conf	/^set -wg mode-style 'bg=cyan,fg=black'$/;"	k
bin	src/diff-so-fancy/package.json	/^  "bin": {$/;"	o
bleach_text	src/diff-so-fancy/diff-so-fancy	/^sub bleach_text {$/;"	s
bleach_text	src/diff-so-fancy/third_party/build_fatpack/diff-so-fancy	/^sub bleach_text {$/;"	s
boolean	src/diff-so-fancy/diff-so-fancy	/^sub boolean {$/;"	s
boolean	src/diff-so-fancy/third_party/build_fatpack/diff-so-fancy	/^sub boolean {$/;"	s
bugs	src/diff-so-fancy/package.json	/^  "bugs": {$/;"	o
changeHunkIndicators	src/diff-so-fancy/README.md	/^### changeHunkIndicators$/;"	S
char_count	src/diff-so-fancy/diff-so-fancy	/^sub char_count {$/;"	s
char_count	src/diff-so-fancy/third_party/build_fatpack/diff-so-fancy	/^sub char_count {$/;"	s
check_first_run	src/diff-so-fancy/diff-so-fancy	/^sub check_first_run {$/;"	s
check_first_run	src/diff-so-fancy/third_party/build_fatpack/diff-so-fancy	/^sub check_first_run {$/;"	s
clean	src/minpac/test/Make_win.mak	/^clean:$/;"	t
clean	src/minpac/test/Makefile	/^clean:$/;"	t
clipboard	src/diff-so-fancy/report-bug.sh	/^clipboard() {$/;"	f
color	src/diff-so-fancy/diff-so-fancy	/^sub color {$/;"	s
color	src/diff-so-fancy/third_party/build_fatpack/build.pl	/^sub color {$/;"	s
color	src/diff-so-fancy/third_party/build_fatpack/diff-so-fancy	/^sub color {$/;"	s
color_config	src/diff-so-fancy/lib/DiffHighlight.pm	/^sub color_config {$/;"	s
color_config	src/diff-so-fancy/third_party/build_fatpack/diff-so-fancy	/^  sub color_config {$/;"	s
configure	install_vim.sh	/^configure () {$/;"	f
definition	.ctags	/^--regex-clojure=\/\\([ \\t]*def[ \\t]+([-[:alnum:]*+!_:\\\/.?]+)\/\\1\/d,definition\/$/;"	k	langdef:Clojure
definition	.ctags	/^--regex-clojure=\/\\([ \\t]*defprotocol[ \\t]+([-[:alnum:]*+!_:\\\/.?]+)\/\\1\/d,definition\/$/;"	k	langdef:Clojure
definition	.ctags	/^--regex-clojure=\/\\([ \\t]*defstate[ \\t]+([-[:alnum:]*+!_:\\\/.?]+)\/\\1\/d,definition\/$/;"	k	langdef:Clojure
definition (once)	.ctags	/^--regex-clojure=\/\\([ \\t]*defonce[ \\t]+([-[:alnum:]*+!_:\\\/.?]+)\/\\1\/c,definition (once)\/$/;"	k	langdef:Clojure
deps-edn-symlink	Makefile	/^deps-edn-symlink:$/;"	t
description	src/diff-so-fancy/package.json	/^  "description": "Good-lookin' diffs with diff-highlight and more",$/;"	s
diff-so-fancy	Makefile	/^diff-so-fancy:$/;"	t
diff-so-fancy	src/diff-so-fancy/package.json	/^    "diff-so-fancy": "diff-so-fancy"$/;"	s	object:bin
diff-so-fancy  [![Circle CI build](https://circleci.com/gh/so-fancy/diff-so-fancy.svg?style=shield)](https://circleci.com/gh/so-fancy/diff-so-fancy) [![TravisCI build](https://travis-ci.org/so-fancy/diff-so-fancy.svg?branch=master)](https://travis-ci.org/so-fancy/diff-so-fancy) [![AppVeyor build](https://ci.appveyor.com/api/projects/status/github/so-fancy/diff-so-fancy?branch=master&svg=true)](https://ci.appveyor.com/project/stevemao/diff-so-fancy/branch/master)	src/diff-so-fancy/README.md	/^# diff-so-fancy  [![Circle CI build](https:\/\/circleci.com\/gh\/so-fancy\/diff-so-fancy.svg?sty/;"	c
do_dsf_stuff	src/diff-so-fancy/diff-so-fancy	/^sub do_dsf_stuff {$/;"	s
do_dsf_stuff	src/diff-so-fancy/third_party/build_fatpack/diff-so-fancy	/^sub do_dsf_stuff {$/;"	s
does_skip_asset	src/minpac/tools/dl-kaoriya-vim.py	/^def does_skip_asset(asset):$/;"	f
dump_ansi	src/diff-so-fancy/third_party/ansi-reveal/ansi-reveal.pl	/^sub dump_ansi {$/;"	s
error	src/minpac/test/runtest.vim	/^  let error = 'Screen size too small! Tests require at least 24 lines with 80 characters'$/;"	v
fg	.tmux.conf	/^set -g pane-active-border-style 'fg=cyan'$/;"	k
fg	.tmux.conf	/^set -g status-left-style 'fg=colour255,bg=colour166,bold' $/;"	k
file_change_string	src/diff-so-fancy/diff-so-fancy	/^sub file_change_string {$/;"	s
file_change_string	src/diff-so-fancy/third_party/build_fatpack/diff-so-fancy	/^sub file_change_string {$/;"	s
first_run	src/minpac/test/runtest.vim	/^    let first_run = v:errors$/;"	v
flush	src/diff-so-fancy/lib/DiffHighlight.pm	/^sub flush {$/;"	s
flush	src/diff-so-fancy/third_party/build_fatpack/diff-so-fancy	/^  sub flush {$/;"	s
ftplugin-symlink	Makefile	/^ftplugin-symlink:$/;"	t
function	.ctags	/^--regex-clojure=\/\\([ \\t]*defn[ \\t]+([-[:alnum:]*+!_:\\\/.?]+)\/\\1\/f,function\/$/;"	k	langdef:Clojure
g$	_vimrc	/^nnoremap g$ :tablast<CR>$/;"	m
g0	_vimrc	/^nnoremap g0 :tabfirst<CR>$/;"	m
g:GREP_PROGRAM	_vimrc	/^    let g:GREP_PROGRAM = "grep"$/;"	v
g:GREP_PROGRAM	_vimrc	/^    let g:GREP_PROGRAM = "rg"$/;"	v
g:cc	_vimrc	/^let g:cc=80$/;"	v
g:finish_update	src/minpac/test/test_minpac.vim	/^  let g:finish_update = 0$/;"	v
g:javascript_plugin_jsdoc	_vimrc	/^let g:javascript_plugin_jsdoc = 1 "vim-javascript enable JSDOC highlightning$/;"	v
g:jsx_ext_required	_vimrc	/^let g:jsx_ext_required = 0$/;"	v
g:last_tab	_vimrc	/^    let g:last_tab = 1$/;"	v
g:loaded_minpac	src/minpac/plugin/minpac.vim	/^let g:loaded_minpac = 1$/;"	v
g:minpac#opt	src/minpac/plugin/minpac.vim	/^  let g:minpac#opt = l:opt$/;"	v
g:minpac#pluglist	src/minpac/plugin/minpac.vim	/^  let g:minpac#pluglist = {}$/;"	v
g:minpac#pluglist	src/minpac/plugin/minpac.vim	/^  let g:minpac#pluglist[l:opt.name] = l:opt$/;"	v
g:minpac#pluglist	src/minpac/test/test_minpac.vim	/^  let g:minpac#pluglist.foo = 'bar'$/;"	v
g:move_key_modifier	_vimrc	/^let g:move_key_modifier = "C"$/;"	v
g:post_update	src/minpac/test/test_minpac.vim	/^  let g:post_update = 0$/;"	v
g:testname	src/minpac/test/runtest.vim	/^let g:testname = expand('%')$/;"	v
gT	_vimrc	/^nnoremap gT @='gT'<CR>$/;"	m
g^	_vimrc	/^nnoremap g^ :exe "tabnext " . g:last_tab<CR>$/;"	m
get_color_mapping	src/diff-so-fancy/third_party/term-colors/term-colors.pl	/^sub get_color_mapping {$/;"	s
get_color_names	src/diff-so-fancy/third_party/term-colors/term-colors.pl	/^sub get_color_names {$/;"	s
get_config_color	src/diff-so-fancy/diff-so-fancy	/^	sub get_config_color {$/;"	s
get_config_color	src/diff-so-fancy/third_party/build_fatpack/diff-so-fancy	/^	sub get_config_color {$/;"	s
get_default_colors	src/diff-so-fancy/diff-so-fancy	/^sub get_default_colors {$/;"	s
get_default_colors	src/diff-so-fancy/third_party/build_fatpack/diff-so-fancy	/^sub get_default_colors {$/;"	s
get_less_charset	src/diff-so-fancy/diff-so-fancy	/^sub get_less_charset {$/;"	s
get_less_charset	src/diff-so-fancy/third_party/build_fatpack/diff-so-fancy	/^sub get_less_charset {$/;"	s
get_version	src/diff-so-fancy/third_party/build_fatpack/build.pl	/^sub get_version {$/;"	s
gh_release_url	src/minpac/tools/dl-kaoriya-vim.py	/^gh_release_url = 'https:\/\/api.github.com\/repos\/' + repo_name + '\/releases\/latest'$/;"	v
git_config	src/diff-so-fancy/diff-so-fancy	/^sub git_config {$/;"	s
git_config	src/diff-so-fancy/third_party/build_fatpack/diff-so-fancy	/^sub git_config {$/;"	s
git_config_boolean	src/diff-so-fancy/diff-so-fancy	/^sub git_config_boolean {$/;"	s
git_config_boolean	src/diff-so-fancy/third_party/build_fatpack/diff-so-fancy	/^sub git_config_boolean {$/;"	s
git_config_raw	src/diff-so-fancy/diff-so-fancy	/^	sub git_config_raw {$/;"	s
git_config_raw	src/diff-so-fancy/third_party/build_fatpack/diff-so-fancy	/^	sub git_config_raw {$/;"	s
gt	_vimrc	/^nnoremap gt @='gt'<CR>$/;"	m
handle_line	src/diff-so-fancy/lib/DiffHighlight.pm	/^sub handle_line {$/;"	s
handle_line	src/diff-so-fancy/third_party/build_fatpack/diff-so-fancy	/^  sub handle_line {$/;"	s
has_fatpack	src/diff-so-fancy/third_party/build_fatpack/build.pl	/^sub has_fatpack {$/;"	s
has_stdin	src/diff-so-fancy/diff-so-fancy	/^sub has_stdin {$/;"	s
has_stdin	src/diff-so-fancy/third_party/build_fatpack/diff-so-fancy	/^sub has_stdin {$/;"	s
has_term_ansicolor	src/diff-so-fancy/third_party/term-colors/term-colors.pl	/^sub has_term_ansicolor {$/;"	s
highlight_line	src/diff-so-fancy/lib/DiffHighlight.pm	/^sub highlight_line {$/;"	s
highlight_line	src/diff-so-fancy/third_party/build_fatpack/diff-so-fancy	/^  sub highlight_line {$/;"	s
highlight_pair	src/diff-so-fancy/lib/DiffHighlight.pm	/^sub highlight_pair {$/;"	s
highlight_pair	src/diff-so-fancy/third_party/build_fatpack/diff-so-fancy	/^  sub highlight_pair {$/;"	s
highlight_stdin	src/diff-so-fancy/lib/DiffHighlight.pm	/^sub highlight_stdin {$/;"	s
highlight_stdin	src/diff-so-fancy/third_party/build_fatpack/diff-so-fancy	/^  sub highlight_stdin {$/;"	s
highlight_string	src/diff-so-fancy/third_party/term-colors/term-colors.pl	/^sub highlight_string {$/;"	s
homepage	src/diff-so-fancy/package.json	/^  "homepage": "https:\/\/github.com\/so-fancy\/diff-so-fancy#readme"$/;"	s
horizontal_rule	src/diff-so-fancy/diff-so-fancy	/^sub horizontal_rule {$/;"	s
horizontal_rule	src/diff-so-fancy/third_party/build_fatpack/diff-so-fancy	/^sub horizontal_rule {$/;"	s
i/file	src/diff-so-fancy/test/fixtures/hunk_no_comma.diff	/^--- i\/file$/;"	m
i/lib/awful/widget/keyboardlayout.lua	src/diff-so-fancy/test/fixtures/leading-dashes.diff	/^--- i\/lib\/awful\/widget\/keyboardlayout.lua$/;"	m
in_unit_test	src/diff-so-fancy/diff-so-fancy	/^sub in_unit_test {$/;"	s
in_unit_test	src/diff-so-fancy/third_party/build_fatpack/diff-so-fancy	/^sub in_unit_test {$/;"	s
inline	.ctags	/^--regex-clojure=\/\\([ \\t]*definline[ \\t]+([-[:alnum:]*+!_:\\\/.?]+)\/\\1\/i,inline\/$/;"	k	langdef:Clojure
install	install.sh	/^install () {$/;"	f
install-ctags-lib	Makefile	/^install-ctags-lib:$/;"	t
install_dep	install_vim.sh	/^install_dep () {$/;"	f
intern	.ctags	/^--regex-clojure=\/\\([ \\t]*intern[ \\t]+([-[:alnum:]*+!_:\\\/.?]+)\/\\1\/v,intern\/$/;"	k	langdef:Clojure
is_pair_interesting	src/diff-so-fancy/lib/DiffHighlight.pm	/^sub is_pair_interesting {$/;"	s
is_pair_interesting	src/diff-so-fancy/third_party/build_fatpack/diff-so-fancy	/^  sub is_pair_interesting {$/;"	s
is_windows	src/diff-so-fancy/diff-so-fancy	/^sub is_windows {$/;"	s
is_windows	src/diff-so-fancy/third_party/build_fatpack/diff-so-fancy	/^sub is_windows {$/;"	s
keywords	src/diff-so-fancy/package.json	/^  "keywords": [$/;"	a
license	src/diff-so-fancy/package.json	/^  "license": "MIT",$/;"	s
load_fixture	src/diff-so-fancy/test/test_helper/util.bash	/^load_fixture() {$/;"	f
lockfileVersion	src/diff-so-fancy/package-lock.json	/^  "lockfileVersion": 1$/;"	n
macro	.ctags	/^--regex-clojure=\/\\([ \\t]*defmacro[ \\t]+([-[:alnum:]*+!_:\\\/.?]+)\/\\1\/m,macro\/$/;"	k	langdef:Clojure
mapleader	_vimrc	/^let mapleader=" "$/;"	v
markEmptyLines	src/diff-so-fancy/README.md	/^### markEmptyLines$/;"	S
mark_empty_line	src/diff-so-fancy/diff-so-fancy	/^sub mark_empty_line {$/;"	s
mark_empty_line	src/diff-so-fancy/third_party/build_fatpack/diff-so-fancy	/^sub mark_empty_line {$/;"	s
minpac#add	src/minpac/plugin/minpac.vim	/^function! minpac#add(plugname, ...) abort$/;"	f
minpac#add({url}[, {config}])	src/minpac/README.md	/^#### minpac#add({url}[, {config}])$/;"	t
minpac#clean	src/minpac/plugin/minpac.vim	/^function! minpac#clean(...)$/;"	f
minpac#clean([{name}])	src/minpac/README.md	/^#### minpac#clean([{name}])$/;"	t
minpac#getpackages	src/minpac/plugin/minpac.vim	/^function! minpac#getpackages(...)$/;"	f
minpac#getpackages([{packname}[, {packtype}[, {plugname}[, {nameonly}]]]])	src/minpac/README.md	/^#### minpac#getpackages([{packname}[, {packtype}[, {plugname}[, {nameonly}]]]])$/;"	t
minpac#getpluginfo	src/minpac/plugin/minpac.vim	/^function! minpac#getpluginfo(name)$/;"	f
minpac#getpluginfo({name})	src/minpac/README.md	/^#### minpac#getpluginfo({name})$/;"	t
minpac#getpluglist	src/minpac/plugin/minpac.vim	/^function! minpac#getpluglist()$/;"	f
minpac#getpluglist()	src/minpac/README.md	/^#### minpac#getpluglist()$/;"	t
minpac#impl#clean	src/minpac/autoload/minpac/impl.vim	/^function! minpac#impl#clean(...) abort$/;"	f
minpac#impl#get_plugin_revision	src/minpac/autoload/minpac/impl.vim	/^function! minpac#impl#get_plugin_revision(name) abort$/;"	f
minpac#impl#getpackages	src/minpac/autoload/minpac/impl.vim	/^function! minpac#impl#getpackages(...) abort$/;"	f
minpac#impl#is_update_ran	src/minpac/autoload/minpac/impl.vim	/^function! minpac#impl#is_update_ran() abort$/;"	f
minpac#impl#system	src/minpac/autoload/minpac/impl.vim	/^function! minpac#impl#system(cmds) abort$/;"	f
minpac#impl#update	src/minpac/autoload/minpac/impl.vim	/^function! minpac#impl#update(...) abort$/;"	f
minpac#init	src/minpac/plugin/minpac.vim	/^function! minpac#init(...) abort$/;"	f
minpac#init([{config}])	src/minpac/README.md	/^#### minpac#init([{config}])$/;"	t
minpac#job#send	src/minpac/autoload/minpac/job.vim	/^function! minpac#job#send(jobid, data) abort$/;"	f
minpac#job#start	src/minpac/autoload/minpac/job.vim	/^function! minpac#job#start(cmd, opts) abort$/;"	f
minpac#job#stop	src/minpac/autoload/minpac/job.vim	/^function! minpac#job#stop(jobid) abort$/;"	f
minpac#job#wait	src/minpac/autoload/minpac/job.vim	/^function! minpac#job#wait(jobids, ...) abort$/;"	f
minpac#status	src/minpac/plugin/minpac.vim	/^function! minpac#status(...)$/;"	f
minpac#status#get	src/minpac/autoload/minpac/status.vim	/^function! minpac#status#get(opt) abort$/;"	f
minpac#status([{config}])	src/minpac/README.md	/^#### minpac#status([{config}])$/;"	t
minpac#update	src/minpac/plugin/minpac.vim	/^function! minpac#update(...)$/;"	f
minpac#update([{name}[, {config}]])	src/minpac/README.md	/^#### minpac#update([{name}[, {config}]])$/;"	t
minpac: A minimal package manager for Vim 8 (and Neovim)	src/minpac/README.md	/^minpac: A minimal package manager for Vim 8 (and Neovim)$/;"	c
multimethod definition	.ctags	/^--regex-clojure=\/\\([ \\t]*defmulti[ \\t]+([-[:alnum:]*+!_:\\\/.?]+)\/\\1\/a,multimethod defini/;"	k	langdef:Clojure
multimethod instance	.ctags	/^--regex-clojure=\/\\([ \\t]*defmethod[ \\t]+([-[:alnum:]*+!_:\\\/.?]+)\/\\1\/b,multimethod insta/;"	k	langdef:Clojure
myvimrc	_vimrc	/^augroup myvimrc$/;"	a
name	src/diff-so-fancy/package-lock.json	/^  "name": "diff-so-fancy",$/;"	s
name	src/diff-so-fancy/package.json	/^  "name": "diff-so-fancy",$/;"	s
name	src/minpac/tools/dl-kaoriya-vim.py	/^        name = args.filename$/;"	v
namespace	.ctags	/^--regex-clojure=\/\\([ \\t]*create-ns[ \\t]+([-[:alnum:]*+!_:\\\/.?]+)\/\\1\/n,namespace\/$/;"	k	langdef:Clojure
namespace	.ctags	/^--regex-clojure=\/\\([ \\t]*ns[ \\t]+([-[:alnum:]*+!_:\\\/.?]+)\/\\1\/n,namespace\/$/;"	k	langdef:Clojure
needs_white	src/diff-so-fancy/third_party/term-colors/term-colors.pl	/^sub needs_white {$/;"	s
newtests	src/minpac/test/Make_win.mak	/^newtests: $(NEW_TESTS)$/;"	t
newtests	src/minpac/test/Makefile	/^newtests: newtestssilent$/;"	t
newtestssilent	src/minpac/test/Makefile	/^newtestssilent: $(NEW_TESTS)$/;"	t
nolog	src/minpac/test/Make_win.mak	/^nolog:$/;"	t
nolog	src/minpac/test/Makefile	/^nolog:$/;"	t
output_human	src/diff-so-fancy/third_party/ansi-reveal/ansi-reveal.pl	/^sub output_human {$/;"	s
output_raw	src/diff-so-fancy/third_party/ansi-reveal/ansi-reveal.pl	/^sub output_raw {$/;"	s
package.json	src/diff-so-fancy/test/fixtures/first-three-line.diff	/^--- package.json$/;"	m
parse_hunk_header	src/diff-so-fancy/diff-so-fancy	/^sub parse_hunk_header {$/;"	s
parse_hunk_header	src/diff-so-fancy/third_party/build_fatpack/diff-so-fancy	/^sub parse_hunk_header {$/;"	s
parser	src/minpac/tools/dl-kaoriya-vim.py	/^parser = argparse.ArgumentParser(description=arg_desc)$/;"	v
pfile	src/diff-so-fancy/third_party/build_fatpack/build.pl	/^sub pfile {$/;"	s
private function	.ctags	/^--regex-clojure=\/\\([ \\t]*defn-[ \\t]+([-[:alnum:]*+!_:\\\/.?]+)\/\\1\/p,private function\/$/;"	k	langdef:Clojure
q	ftplugin/qf.vim	/^nnoremap <buffer> q :q<CR>$/;"	m
q	src/minpac/autoload/minpac/status.vim	/^  nnoremap <silent><buffer> q :q<CR>$/;"	m
q:	_vimrc	/^noremap <silent> q: <NOP>$/;"	m
rel_info	src/minpac/tools/dl-kaoriya-vim.py	/^rel_info = json.load(io.StringIO(str(response.read(), 'utf-8')))$/;"	v
repo_name	src/minpac/tools/dl-kaoriya-vim.py	/^repo_name = 'koron\/vim-kaoriya'$/;"	v
report	src/minpac/test/Make_win.mak	/^report:$/;"	t
report	src/minpac/test/Makefile	/^report:$/;"	t
reporthook	src/minpac/tools/dl-kaoriya-vim.py	/^def reporthook(count, blocksize, totalsize):$/;"	f
repository	src/diff-so-fancy/package.json	/^  "repository": {$/;"	o
request	src/minpac/tools/dl-kaoriya-vim.py	/^    request = urllib.request.Request(gh_release_url)$/;"	v
rulerWidth	src/diff-so-fancy/README.md	/^### rulerWidth$/;"	S
s:add_rtp	src/minpac/autoload/minpac/impl.vim	/^function! s:add_rtp(dir) abort$/;"	f
s:chdir	src/minpac/autoload/minpac/impl.vim	/^  function! s:chdir(dir) abort$/;"	f
s:chdir	src/minpac/autoload/minpac/impl.vim	/^  let s:chdir = function('chdir')$/;"	v
s:check_plugin_status	src/minpac/autoload/minpac/impl.vim	/^function! s:check_plugin_status(name) abort$/;"	f
s:decrement_job_count	src/minpac/autoload/minpac/impl.vim	/^function! s:decrement_job_count() abort$/;"	f
s:done	src/minpac/test/runtest.vim	/^let s:done = 0$/;"	v
s:echo_verbose	src/minpac/autoload/minpac/impl.vim	/^function! s:echo_verbose(level, msg) abort$/;"	f
s:echom_verbose	src/minpac/autoload/minpac/impl.vim	/^function! s:echom_verbose(level, msg) abort$/;"	f
s:ensure_initialization	src/minpac/plugin/minpac.vim	/^function! s:ensure_initialization() abort$/;"	f
s:err_cb	src/minpac/autoload/minpac/job.vim	/^function! s:err_cb(jobid, opts, job, data) abort$/;"	f
s:errors	src/minpac/test/runtest.vim	/^let s:errors = []$/;"	v
s:exec_plugin_cmd	src/minpac/autoload/minpac/impl.vim	/^function! s:exec_plugin_cmd(name, cmd, mes) abort$/;"	f
s:exit_cb	src/minpac/autoload/minpac/job.vim	/^function! s:exit_cb(jobid, opts, job, status) abort$/;"	f
s:fail	src/minpac/test/runtest.vim	/^    let s:fail += 1$/;"	v
s:fail	src/minpac/test/runtest.vim	/^let s:fail = 0$/;"	v
s:find_name_by_sha	src/minpac/autoload/minpac/status.vim	/^function! s:find_name_by_sha(sha) abort$/;"	f
s:flaky	src/minpac/test/runtest.vim	/^let s:flaky = [$/;"	v
s:flush_vim_sendraw	src/minpac/autoload/minpac/job.vim	/^function! s:flush_vim_sendraw(jobid, timer) abort$/;"	f
s:generate_helptags	src/minpac/autoload/minpac/impl.vim	/^function! s:generate_helptags(dir) abort$/;"	f
s:get_plugin_branch	src/minpac/autoload/minpac/impl.vim	/^function! s:get_plugin_branch(name) abort$/;"	f
s:get_plugin_latest_tag	src/minpac/autoload/minpac/impl.vim	/^function! s:get_plugin_latest_tag(name, tag) abort$/;"	f
s:get_plugin_tag	src/minpac/autoload/minpac/impl.vim	/^function! s:get_plugin_tag(name) abort$/;"	f
s:getnames	src/minpac/test/test_minpac.vim	/^func s:getnames(plugs)$/;"	f
s:invoke_hook	src/minpac/autoload/minpac/impl.vim	/^function! s:invoke_hook(hooktype, args, hook) abort$/;"	f
s:is_helptags_old	src/minpac/autoload/minpac/impl.vim	/^function! s:is_helptags_old(dir) abort$/;"	f
s:is_same_commit	src/minpac/autoload/minpac/impl.vim	/^function! s:is_same_commit(a, b) abort$/;"	f
s:job_err_cb	src/minpac/autoload/minpac/impl.vim	/^function! s:job_err_cb(id, message, event) dict abort$/;"	f
s:job_error_unsupported_job_type	src/minpac/autoload/minpac/job.vim	/^let s:job_error_unsupported_job_type = -2 " unsupported job type$/;"	v
s:job_exit_cb	src/minpac/autoload/minpac/impl.vim	/^function! s:job_exit_cb(id, errcode, event) dict abort$/;"	f
s:job_send	src/minpac/autoload/minpac/job.vim	/^function! s:job_send(jobid, data) abort$/;"	f
s:job_start	src/minpac/autoload/minpac/job.vim	/^function! s:job_start(cmd, opts) abort$/;"	f
s:job_stop	src/minpac/autoload/minpac/job.vim	/^function! s:job_stop(jobid) abort$/;"	f
s:job_supported_types	src/minpac/autoload/minpac/job.vim	/^function! s:job_supported_types() abort$/;"	f
s:job_supports_type	src/minpac/autoload/minpac/job.vim	/^function! s:job_supports_type(type) abort$/;"	f
s:job_type_nvimjob	src/minpac/autoload/minpac/job.vim	/^let s:job_type_nvimjob = 'nvimjob'$/;"	v
s:job_type_vimjob	src/minpac/autoload/minpac/job.vim	/^let s:job_type_vimjob = 'vimjob'$/;"	v
s:job_wait	src/minpac/autoload/minpac/job.vim	/^function! s:job_wait(jobids, timeout) abort$/;"	f
s:job_wait_single	src/minpac/autoload/minpac/job.vim	/^function! s:job_wait_single(jobid, timeout, start) abort$/;"	f
s:jobidseq	src/minpac/autoload/minpac/job.vim	/^let s:jobidseq = 0$/;"	v
s:joblist	src/minpac/autoload/minpac/impl.vim	/^let s:joblist = []$/;"	v
s:jobs	src/minpac/autoload/minpac/job.vim	/^let s:jobs = {} " { job, opts, type: 'vimjob|nvimjob'}$/;"	v
s:mappings	src/minpac/autoload/minpac/status.vim	/^function! s:mappings() abort$/;"	f
s:match_plugin	src/minpac/autoload/minpac/impl.vim	/^function! s:match_plugin(dir, packname, plugnames) abort$/;"	f
s:messages	src/minpac/test/runtest.vim	/^let s:messages = []$/;"	v
s:nextPackage	src/minpac/autoload/minpac/status.vim	/^function! s:nextPackage() abort$/;"	f
s:on_exit	src/minpac/autoload/minpac/job.vim	/^function! s:on_exit(jobid, status, event) abort$/;"	f
s:on_stderr	src/minpac/autoload/minpac/job.vim	/^function! s:on_stderr(jobid, data, event) abort$/;"	f
s:on_stdout	src/minpac/autoload/minpac/job.vim	/^function! s:on_stdout(jobid, data, event) abort$/;"	f
s:openSha	src/minpac/autoload/minpac/status.vim	/^function! s:openSha() abort$/;"	f
s:out_cb	src/minpac/autoload/minpac/job.vim	/^function! s:out_cb(jobid, opts, job, data) abort$/;"	f
s:prevPackage	src/minpac/autoload/minpac/status.vim	/^function! s:prevPackage() abort$/;"	f
s:quote_cmds	src/minpac/autoload/minpac/impl.vim	/^  function! s:quote_cmds(cmds) abort$/;"	f
s:remain_jobs	src/minpac/autoload/minpac/impl.vim	/^let s:remain_jobs = 0$/;"	v
s:results	src/minpac/autoload/minpac/status.vim	/^let s:results = []$/;"	v
s:save_cpo	src/minpac/autoload/minpac/job.vim	/^let s:save_cpo = &cpo$/;"	v
s:skipped	src/minpac/test/runtest.vim	/^let s:skipped = []$/;"	v
s:srcdir	src/minpac/test/runtest.vim	/^let s:srcdir = expand('%:p:h:h')$/;"	v
s:start_job	src/minpac/autoload/minpac/impl.vim	/^function! s:start_job(cmds, name, seq) abort$/;"	f
s:syntax	src/minpac/autoload/minpac/status.vim	/^function! s:syntax() abort$/;"	f
s:tests	src/minpac/test/runtest.vim	/^  let s:tests = filter(s:tests, 'v:val =~ argv(1)')$/;"	v
s:tests	src/minpac/test/runtest.vim	/^let s:tests = split(substitute(@q, 'function \\(\\k*()\\)', '\\1', 'g'))$/;"	v
s:update_single_plugin	src/minpac/autoload/minpac/impl.vim	/^function! s:update_single_plugin(name, force) abort$/;"	f
scripts	src/diff-so-fancy/package.json	/^  "scripts": {$/;"	o
second_run	src/minpac/test/runtest.vim	/^      let second_run = v:errors$/;"	v
set_bcolor	src/diff-so-fancy/third_party/term-colors/term-colors.pl	/^sub set_bcolor {$/;"	s
set_defaults	src/diff-so-fancy/diff-so-fancy	/^sub set_defaults {$/;"	s
set_defaults	src/diff-so-fancy/third_party/build_fatpack/diff-so-fancy	/^sub set_defaults {$/;"	s
set_env	src/diff-so-fancy/test/test_helper/util.bash	/^set_env() {$/;"	f
set_fcolor	src/diff-so-fancy/third_party/term-colors/term-colors.pl	/^sub set_fcolor {$/;"	s
should_print_unicode	src/diff-so-fancy/diff-so-fancy	/^sub should_print_unicode {$/;"	s
should_print_unicode	src/diff-so-fancy/third_party/build_fatpack/diff-so-fancy	/^sub should_print_unicode {$/;"	s
show_hunk	src/diff-so-fancy/lib/DiffHighlight.pm	/^sub show_hunk {$/;"	s
show_hunk	src/diff-so-fancy/third_party/build_fatpack/diff-so-fancy	/^  sub show_hunk {$/;"	s
split_line	src/diff-so-fancy/lib/DiffHighlight.pm	/^sub split_line {$/;"	s
split_line	src/diff-so-fancy/third_party/build_fatpack/diff-so-fancy	/^  sub split_line {$/;"	s
start_line_calc	src/diff-so-fancy/diff-so-fancy	/^sub start_line_calc {$/;"	s
start_line_calc	src/diff-so-fancy/third_party/build_fatpack/diff-so-fancy	/^sub start_line_calc {$/;"	s
starts_with_ansi	src/diff-so-fancy/diff-so-fancy	/^sub starts_with_ansi {$/;"	s
starts_with_ansi	src/diff-so-fancy/third_party/build_fatpack/diff-so-fancy	/^sub starts_with_ansi {$/;"	s
stripLeadingSymbols	src/diff-so-fancy/README.md	/^### stripLeadingSymbols$/;"	S
strip_leading_indicators	src/diff-so-fancy/diff-so-fancy	/^sub strip_leading_indicators {$/;"	s
strip_leading_indicators	src/diff-so-fancy/third_party/build_fatpack/diff-so-fancy	/^sub strip_leading_indicators {$/;"	s
struct	.ctags	/^--regex-clojure=\/\\([ \\t]*defstruct[ \\t]+([-[:alnum:]*+!_:\\\/.?]+)\/\\1\/s,struct\/$/;"	k	langdef:Clojure
submodule	Makefile	/^submodule:$/;"	t
term_ansicolor	src/diff-so-fancy/third_party/term-colors/term-colors.pl	/^sub term_ansicolor {$/;"	s
test	src/diff-so-fancy/package.json	/^    "test": "bats test"$/;"	s	object:scripts
test/data/readywaitasset.js	src/diff-so-fancy/test/fixtures/single-line-remove.diff	/^--- test\/data\/readywaitasset.js$/;"	d
trim	src/diff-so-fancy/diff-so-fancy	/^sub trim {$/;"	s
trim	src/diff-so-fancy/third_party/build_fatpack/build.pl	/^sub trim {$/;"	s
trim	src/diff-so-fancy/third_party/build_fatpack/diff-so-fancy	/^sub trim {$/;"	s
type	src/diff-so-fancy/package.json	/^    "type": "git",$/;"	s	object:repository
uninstall	install.sh	/^uninstall () {$/;"	f
upgrade	install.sh	/^upgrade () {$/;"	f
url	src/diff-so-fancy/package.json	/^    "url": "git+https:\/\/github.com\/so-fancy\/diff-so-fancy.git"$/;"	s	object:repository
url	src/diff-so-fancy/package.json	/^    "url": "https:\/\/github.com\/so-fancy\/diff-so-fancy\/issues"$/;"	s	object:bugs
usage	src/diff-so-fancy/diff-so-fancy	/^sub usage {$/;"	s
usage	src/diff-so-fancy/third_party/build_fatpack/diff-so-fancy	/^sub usage {$/;"	s
useUnicodeRuler	src/diff-so-fancy/README.md	/^### useUnicodeRuler$/;"	S
version	src/diff-so-fancy/diff-so-fancy	/^sub version {$/;"	s
version	src/diff-so-fancy/package-lock.json	/^  "version": "1.2.7",$/;"	s
version	src/diff-so-fancy/package.json	/^  "version": "1.2.7",$/;"	s
version	src/diff-so-fancy/third_party/build_fatpack/diff-so-fancy	/^sub version {$/;"	s
vim-symlink	Makefile	/^vim-symlink: after-symlink ftplugin-symlink$/;"	t
visible_substr	src/diff-so-fancy/lib/DiffHighlight.pm	/^sub visible_substr {$/;"	s
visible_substr	src/diff-so-fancy/third_party/build_fatpack/diff-so-fancy	/^  sub visible_substr {$/;"	s
visible_width	src/diff-so-fancy/lib/DiffHighlight.pm	/^sub visible_width {$/;"	s
visible_width	src/diff-so-fancy/third_party/build_fatpack/diff-so-fancy	/^  sub visible_width {$/;"	s
xmodmap	Makefile	/^xmodmap:$/;"	t
